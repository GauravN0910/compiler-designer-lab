Terminals unused in grammar

    AND
    OR


Grammar

    0 $accept: program $end

    1 program: entry '(' ')' '{' body return '}'

    2 entry: datatype MAIN

    3 datatype: INT
    4         | FLOAT
    5         | CHAR
    6         | BOOL

    7 body: block body
    8     | ε

    9 block: WHILE '(' condition ')' '{' body '}'
   10      | IF '(' condition ')' '{' body '}' else
   11      | statement ';'
   12      | PRINTFF '(' STR ')' ';'
   13      | PRINTFF '(' valcharbool ')' ';'
   14      | SCANFF '(' STR ',' '&' ID ')' ';'

   15 else: ELSE '{' body '}'
   16     | ε

   17 condition: expression relop charbool
   18          | expression relop expression
   19          | TRUE
   20          | FALSE

   21 statement: DECLARE datatype ID init
   22          | ID '=' expression

   23 init: '=' charbool
   24     | '=' expression

   25 expression: expression addops term
   26           | term

   27 term: term mulops factor
   28     | factor

   29 factor: base exponent base
   30       | LOG '(' value ',' value ')'
   31       | base

   32 base: value
   33     | '(' expression ')'

   34 exponent: POW

   35 mulops: MULTIPLY
   36       | DIVIDE

   37 addops: ADD
   38       | SUBTRACT

   39 relop: LT
   40      | GT
   41      | LTE
   42      | GTE
   43      | EQ
   44      | NE

   45 value: NUMBER
   46      | FLOAT_NUM
   47      | ID

   48 charbool: bools
   49         | CHARACTER

   50 valcharbool: value
   51            | charbool

   52 bools: TRUE
   53      | FALSE

   54 return: RETURN valcharbool ';'
   55       | ε


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 14
    '(' (40) 1 9 10 12 13 14 30 33
    ')' (41) 1 9 10 12 13 14 30 33
    ',' (44) 14 30
    ';' (59) 11 12 13 14 54
    '=' (61) 22 23 24
    '{' (123) 1 9 10 15
    '}' (125) 1 9 10 15
    error (256)
    PRINTFF <nd_obj> (258) 12 13
    SCANFF <nd_obj> (259) 14
    IF <nd_obj> (260) 10
    ELSE <nd_obj> (261) 15
    WHILE <nd_obj> (262) 9
    RETURN <nd_obj> (263) 54
    DECLARE <nd_obj> (264) 21
    ADD <nd_obj> (265) 37
    SUBTRACT <nd_obj> (266) 38
    MULTIPLY <nd_obj> (267) 35
    DIVIDE <nd_obj> (268) 36
    LOG <nd_obj> (269) 30
    POW <nd_obj> (270) 34
    GTE <nd_obj> (271) 42
    LTE <nd_obj> (272) 41
    GT <nd_obj> (273) 40
    LT <nd_obj> (274) 39
    EQ <nd_obj> (275) 43
    NE <nd_obj> (276) 44
    TRUE <nd_obj> (277) 19 52
    FALSE <nd_obj> (278) 20 53
    AND <nd_obj> (279)
    OR <nd_obj> (280)
    INT <nd_obj> (281) 3
    FLOAT <nd_obj> (282) 4
    CHAR <nd_obj> (283) 5
    BOOL <nd_obj> (284) 6
    NUMBER <nd_obj> (285) 45
    FLOAT_NUM <nd_obj> (286) 46
    ID <nd_obj> (287) 14 21 22 47
    STR <nd_obj> (288) 12 14
    CHARACTER <nd_obj> (289) 49
    MAIN <nd_obj> (290) 2


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program <nd_obj> (45)
        on left: 1
        on right: 0
    entry <nd_obj> (46)
        on left: 2
        on right: 1
    datatype <nd_obj> (47)
        on left: 3 4 5 6
        on right: 2 21
    body <nd_obj> (48)
        on left: 7 8
        on right: 1 7 9 10 15
    block <nd_obj> (49)
        on left: 9 10 11 12 13 14
        on right: 7
    else <nd_obj> (50)
        on left: 15 16
        on right: 10
    condition <nd_obj> (51)
        on left: 17 18 19 20
        on right: 9 10
    statement <nd_obj> (52)
        on left: 21 22
        on right: 11
    init <nd_obj> (53)
        on left: 23 24
        on right: 21
    expression <nd_obj> (54)
        on left: 25 26
        on right: 17 18 22 24 25 33
    term <nd_obj> (55)
        on left: 27 28
        on right: 25 26 27
    factor <nd_obj> (56)
        on left: 29 30 31
        on right: 27 28
    base <nd_obj> (57)
        on left: 32 33
        on right: 29 31
    exponent <nd_obj> (58)
        on left: 34
        on right: 29
    mulops <nd_obj> (59)
        on left: 35 36
        on right: 27
    addops <nd_obj> (60)
        on left: 37 38
        on right: 25
    relop <nd_obj> (61)
        on left: 39 40 41 42 43 44
        on right: 17 18
    value <nd_obj> (62)
        on left: 45 46 47
        on right: 30 32 50
    charbool <nd_obj> (63)
        on left: 48 49
        on right: 17 23 51
    valcharbool <nd_obj> (64)
        on left: 50 51
        on right: 13 54
    bools <nd_obj> (65)
        on left: 52 53
        on right: 48
    return <nd_obj> (66)
        on left: 54 55
        on right: 1


State 0

    0 $accept: • program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    program   go to state 5
    entry     go to state 6
    datatype  go to state 7


State 1

    3 datatype: INT •

    $default  reduce using rule 3 (datatype)


State 2

    4 datatype: FLOAT •

    $default  reduce using rule 4 (datatype)


State 3

    5 datatype: CHAR •

    $default  reduce using rule 5 (datatype)


State 4

    6 datatype: BOOL •

    $default  reduce using rule 6 (datatype)


State 5

    0 $accept: program • $end

    $end  shift, and go to state 8


State 6

    1 program: entry • '(' ')' '{' body return '}'

    '('  shift, and go to state 9


State 7

    2 entry: datatype • MAIN

    MAIN  shift, and go to state 10


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: entry '(' • ')' '{' body return '}'

    ')'  shift, and go to state 11


State 10

    2 entry: datatype MAIN •

    $default  reduce using rule 2 (entry)


State 11

    1 program: entry '(' ')' • '{' body return '}'

    '{'  shift, and go to state 12


State 12

    1 program: entry '(' ')' '{' • body return '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 19
    block      go to state 20
    statement  go to state 21


State 13

   12 block: PRINTFF • '(' STR ')' ';'
   13      | PRINTFF • '(' valcharbool ')' ';'

    '('  shift, and go to state 22


State 14

   14 block: SCANFF • '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 23


State 15

   10 block: IF • '(' condition ')' '{' body '}' else

    '('  shift, and go to state 24


State 16

    9 block: WHILE • '(' condition ')' '{' body '}'

    '('  shift, and go to state 25


State 17

   21 statement: DECLARE • datatype ID init

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    datatype  go to state 26


State 18

   22 statement: ID • '=' expression

    '='  shift, and go to state 27


State 19

    1 program: entry '(' ')' '{' body • return '}'

    RETURN  shift, and go to state 28

    $default  reduce using rule 55 (return)

    return  go to state 29


State 20

    7 body: block • body

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 30
    block      go to state 20
    statement  go to state 21


State 21

   11 block: statement • ';'

    ';'  shift, and go to state 31


State 22

   12 block: PRINTFF '(' • STR ')' ';'
   13      | PRINTFF '(' • valcharbool ')' ';'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    STR        shift, and go to state 37
    CHARACTER  shift, and go to state 38

    value        go to state 39
    charbool     go to state 40
    valcharbool  go to state 41
    bools        go to state 42


State 23

   14 block: SCANFF '(' • STR ',' '&' ID ')' ';'

    STR  shift, and go to state 43


State 24

   10 block: IF '(' • condition ')' '{' body '}' else

    LOG        shift, and go to state 44
    TRUE       shift, and go to state 45
    FALSE      shift, and go to state 46
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    condition   go to state 48
    expression  go to state 49
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53


State 25

    9 block: WHILE '(' • condition ')' '{' body '}'

    LOG        shift, and go to state 44
    TRUE       shift, and go to state 45
    FALSE      shift, and go to state 46
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    condition   go to state 54
    expression  go to state 49
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53


State 26

   21 statement: DECLARE datatype • ID init

    ID  shift, and go to state 55


State 27

   22 statement: ID '=' • expression

    LOG        shift, and go to state 44
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    expression  go to state 56
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53


State 28

   54 return: RETURN • valcharbool ';'

    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    CHARACTER  shift, and go to state 38

    value        go to state 39
    charbool     go to state 40
    valcharbool  go to state 57
    bools        go to state 42


State 29

    1 program: entry '(' ')' '{' body return • '}'

    '}'  shift, and go to state 58


State 30

    7 body: block body •

    $default  reduce using rule 7 (body)


State 31

   11 block: statement ';' •

    $default  reduce using rule 11 (block)


State 32

   52 bools: TRUE •

    $default  reduce using rule 52 (bools)


State 33

   53 bools: FALSE •

    $default  reduce using rule 53 (bools)


State 34

   45 value: NUMBER •

    $default  reduce using rule 45 (value)


State 35

   46 value: FLOAT_NUM •

    $default  reduce using rule 46 (value)


State 36

   47 value: ID •

    $default  reduce using rule 47 (value)


State 37

   12 block: PRINTFF '(' STR • ')' ';'

    ')'  shift, and go to state 59


State 38

   49 charbool: CHARACTER •

    $default  reduce using rule 49 (charbool)


State 39

   50 valcharbool: value •

    $default  reduce using rule 50 (valcharbool)


State 40

   51 valcharbool: charbool •

    $default  reduce using rule 51 (valcharbool)


State 41

   13 block: PRINTFF '(' valcharbool • ')' ';'

    ')'  shift, and go to state 60


State 42

   48 charbool: bools •

    $default  reduce using rule 48 (charbool)


State 43

   14 block: SCANFF '(' STR • ',' '&' ID ')' ';'

    ','  shift, and go to state 61


State 44

   30 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 62


State 45

   19 condition: TRUE •

    $default  reduce using rule 19 (condition)


State 46

   20 condition: FALSE •

    $default  reduce using rule 20 (condition)


State 47

   33 base: '(' • expression ')'

    LOG        shift, and go to state 44
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    expression  go to state 63
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53


State 48

   10 block: IF '(' condition • ')' '{' body '}' else

    ')'  shift, and go to state 64


State 49

   17 condition: expression • relop charbool
   18          | expression • relop expression
   25 expression: expression • addops term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    GT        shift, and go to state 69
    LT        shift, and go to state 70
    EQ        shift, and go to state 71
    NE        shift, and go to state 72

    addops  go to state 73
    relop   go to state 74


State 50

   26 expression: term •
   27 term: term • mulops factor

    MULTIPLY  shift, and go to state 75
    DIVIDE    shift, and go to state 76

    $default  reduce using rule 26 (expression)

    mulops  go to state 77


State 51

   28 term: factor •

    $default  reduce using rule 28 (term)


State 52

   29 factor: base • exponent base
   31       | base •

    POW  shift, and go to state 78

    $default  reduce using rule 31 (factor)

    exponent  go to state 79


State 53

   32 base: value •

    $default  reduce using rule 32 (base)


State 54

    9 block: WHILE '(' condition • ')' '{' body '}'

    ')'  shift, and go to state 80


State 55

   21 statement: DECLARE datatype ID • init

    '='  shift, and go to state 81

    init  go to state 82


State 56

   22 statement: ID '=' expression •
   25 expression: expression • addops term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 22 (statement)

    addops  go to state 73


State 57

   54 return: RETURN valcharbool • ';'

    ';'  shift, and go to state 83


State 58

    1 program: entry '(' ')' '{' body return '}' •

    $default  reduce using rule 1 (program)


State 59

   12 block: PRINTFF '(' STR ')' • ';'

    ';'  shift, and go to state 84


State 60

   13 block: PRINTFF '(' valcharbool ')' • ';'

    ';'  shift, and go to state 85


State 61

   14 block: SCANFF '(' STR ',' • '&' ID ')' ';'

    '&'  shift, and go to state 86


State 62

   30 factor: LOG '(' • value ',' value ')'

    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36

    value  go to state 87


State 63

   25 expression: expression • addops term
   33 base: '(' expression • ')'

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66
    ')'       shift, and go to state 88

    addops  go to state 73


State 64

   10 block: IF '(' condition ')' • '{' body '}' else

    '{'  shift, and go to state 89


State 65

   37 addops: ADD •

    $default  reduce using rule 37 (addops)


State 66

   38 addops: SUBTRACT •

    $default  reduce using rule 38 (addops)


State 67

   42 relop: GTE •

    $default  reduce using rule 42 (relop)


State 68

   41 relop: LTE •

    $default  reduce using rule 41 (relop)


State 69

   40 relop: GT •

    $default  reduce using rule 40 (relop)


State 70

   39 relop: LT •

    $default  reduce using rule 39 (relop)


State 71

   43 relop: EQ •

    $default  reduce using rule 43 (relop)


State 72

   44 relop: NE •

    $default  reduce using rule 44 (relop)


State 73

   25 expression: expression addops • term

    LOG        shift, and go to state 44
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    term    go to state 90
    factor  go to state 51
    base    go to state 52
    value   go to state 53


State 74

   17 condition: expression relop • charbool
   18          | expression relop • expression

    LOG        shift, and go to state 44
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    CHARACTER  shift, and go to state 38
    '('        shift, and go to state 47

    expression  go to state 91
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53
    charbool    go to state 92
    bools       go to state 42


State 75

   35 mulops: MULTIPLY •

    $default  reduce using rule 35 (mulops)


State 76

   36 mulops: DIVIDE •

    $default  reduce using rule 36 (mulops)


State 77

   27 term: term mulops • factor

    LOG        shift, and go to state 44
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    factor  go to state 93
    base    go to state 52
    value   go to state 53


State 78

   34 exponent: POW •

    $default  reduce using rule 34 (exponent)


State 79

   29 factor: base exponent • base

    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    '('        shift, and go to state 47

    base   go to state 94
    value  go to state 53


State 80

    9 block: WHILE '(' condition ')' • '{' body '}'

    '{'  shift, and go to state 95


State 81

   23 init: '=' • charbool
   24     | '=' • expression

    LOG        shift, and go to state 44
    TRUE       shift, and go to state 32
    FALSE      shift, and go to state 33
    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36
    CHARACTER  shift, and go to state 38
    '('        shift, and go to state 47

    expression  go to state 96
    term        go to state 50
    factor      go to state 51
    base        go to state 52
    value       go to state 53
    charbool    go to state 97
    bools       go to state 42


State 82

   21 statement: DECLARE datatype ID init •

    $default  reduce using rule 21 (statement)


State 83

   54 return: RETURN valcharbool ';' •

    $default  reduce using rule 54 (return)


State 84

   12 block: PRINTFF '(' STR ')' ';' •

    $default  reduce using rule 12 (block)


State 85

   13 block: PRINTFF '(' valcharbool ')' ';' •

    $default  reduce using rule 13 (block)


State 86

   14 block: SCANFF '(' STR ',' '&' • ID ')' ';'

    ID  shift, and go to state 98


State 87

   30 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 99


State 88

   33 base: '(' expression ')' •

    $default  reduce using rule 33 (base)


State 89

   10 block: IF '(' condition ')' '{' • body '}' else

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 100
    block      go to state 20
    statement  go to state 21


State 90

   25 expression: expression addops term •
   27 term: term • mulops factor

    MULTIPLY  shift, and go to state 75
    DIVIDE    shift, and go to state 76

    $default  reduce using rule 25 (expression)

    mulops  go to state 77


State 91

   18 condition: expression relop expression •
   25 expression: expression • addops term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 18 (condition)

    addops  go to state 73


State 92

   17 condition: expression relop charbool •

    $default  reduce using rule 17 (condition)


State 93

   27 term: term mulops factor •

    $default  reduce using rule 27 (term)


State 94

   29 factor: base exponent base •

    $default  reduce using rule 29 (factor)


State 95

    9 block: WHILE '(' condition ')' '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 101
    block      go to state 20
    statement  go to state 21


State 96

   24 init: '=' expression •
   25 expression: expression • addops term

    ADD       shift, and go to state 65
    SUBTRACT  shift, and go to state 66

    $default  reduce using rule 24 (init)

    addops  go to state 73


State 97

   23 init: '=' charbool •

    $default  reduce using rule 23 (init)


State 98

   14 block: SCANFF '(' STR ',' '&' ID • ')' ';'

    ')'  shift, and go to state 102


State 99

   30 factor: LOG '(' value ',' • value ')'

    NUMBER     shift, and go to state 34
    FLOAT_NUM  shift, and go to state 35
    ID         shift, and go to state 36

    value  go to state 103


State 100

   10 block: IF '(' condition ')' '{' body • '}' else

    '}'  shift, and go to state 104


State 101

    9 block: WHILE '(' condition ')' '{' body • '}'

    '}'  shift, and go to state 105


State 102

   14 block: SCANFF '(' STR ',' '&' ID ')' • ';'

    ';'  shift, and go to state 106


State 103

   30 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 107


State 104

   10 block: IF '(' condition ')' '{' body '}' • else

    ELSE  shift, and go to state 108

    $default  reduce using rule 16 (else)

    else  go to state 109


State 105

    9 block: WHILE '(' condition ')' '{' body '}' •

    $default  reduce using rule 9 (block)


State 106

   14 block: SCANFF '(' STR ',' '&' ID ')' ';' •

    $default  reduce using rule 14 (block)


State 107

   30 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 30 (factor)


State 108

   15 else: ELSE • '{' body '}'

    '{'  shift, and go to state 110


State 109

   10 block: IF '(' condition ')' '{' body '}' else •

    $default  reduce using rule 10 (block)


State 110

   15 else: ELSE '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 111
    block      go to state 20
    statement  go to state 21


State 111

   15 else: ELSE '{' body • '}'

    '}'  shift, and go to state 112


State 112

   15 else: ELSE '{' body '}' •

    $default  reduce using rule 15 (else)
