State 122 conflicts: 2 shift/reduce
State 123 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: entry '(' ')' '{' body return '}'

    2 entry: datatype ID

    3 datatype: INT
    4         | FLOAT
    5         | CHAR
    6         | BOOL

    7 body: block body
    8     | ε

    9 $@1: ε

   10 $@2: ε

   11 block: WHILE $@1 '(' condition ')' $@2 '{' body '}'

   12 $@3: ε

   13 $@4: ε

   14 $@5: ε

   15 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 else
   16      | statement ';'

   17 $@6: ε

   18 block: PRINTFF $@6 '(' printparam ')' ';'

   19 $@7: ε

   20 $@8: ε

   21 block: SCANFF $@7 '(' STR ',' '&' ID $@8 ')' ';'

   22 printparam: valcharbool
   23           | STR

   24 $@9: ε

   25 else: ELSE $@9 '{' body '}'
   26     | ε

   27 M: ε

   28 condition: condition AND M condition
   29          | condition OR M condition
   30          | valcharbool relop valcharbool
   31          | '(' condition ')'

   32 $@10: ε

   33 condition: TRUE $@10

   34 $@11: ε

   35 condition: FALSE $@11

   36 $@12: ε

   37 statement: DECLARE datatype ID $@12 init

   38 $@13: ε

   39 statement: ID $@13 '=' expression

   40 $@14: ε

   41 statement: ID $@14 relop expression

   42 init: '=' charbool
   43     | '=' expression
   44     | '[' NUMBER ']'

   45 expression: expression addops term
   46           | term

   47 term: term mulops factor
   48     | factor

   49 factor: base exponent base
   50       | LOG '(' value ',' value ')'
   51       | base

   52 base: value
   53     | '(' expression ')'

   54 exponent: POW

   55 mulops: MULTIPLY
   56       | DIVIDE

   57 addops: ADD
   58       | SUBTRACT

   59 relop: LT
   60      | GT
   61      | LTE
   62      | GTE
   63      | EQ
   64      | NE

   65 value: NUMBER
   66      | FLOAT_NUM
   67      | ID
   68      | array

   69 array: ID '[' NUMBER ']'

   70 charbool: bools
   71         | CHARACTER

   72 valcharbool: value
   73            | charbool

   74 bools: TRUE
   75      | FALSE

   76 $@15: ε

   77 return: RETURN $@15 valcharbool ';'
   78       | ε


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 21
    '(' (40) 1 11 15 18 21 31 50 53
    ')' (41) 1 11 15 18 21 31 50 53
    ',' (44) 21 50
    ';' (59) 16 18 21 77
    '=' (61) 39 42 43
    '[' (91) 44 69
    ']' (93) 44 69
    '{' (123) 1 11 15 25
    '}' (125) 1 11 15 25
    error (256)
    PRINTFF <nd_obj> (258) 18
    SCANFF <nd_obj> (259) 21
    IF <nd_obj> (260) 15
    ELSE <nd_obj> (261) 25
    WHILE <nd_obj> (262) 11
    RETURN <nd_obj> (263) 77
    DECLARE <nd_obj> (264) 37
    ADD <nd_obj> (265) 57
    SUBTRACT <nd_obj> (266) 58
    MULTIPLY <nd_obj> (267) 55
    DIVIDE <nd_obj> (268) 56
    LOG <nd_obj> (269) 50
    POW <nd_obj> (270) 54
    GTE <nd_obj> (271) 62
    LTE <nd_obj> (272) 61
    GT <nd_obj> (273) 60
    LT <nd_obj> (274) 59
    EQ <nd_obj> (275) 63
    NE <nd_obj> (276) 64
    TRUE <nd_obj> (277) 33 74
    FALSE <nd_obj> (278) 35 75
    AND <nd_obj> (279) 28
    OR <nd_obj> (280) 29
    INT <nd_obj> (281) 3
    FLOAT <nd_obj> (282) 4
    CHAR <nd_obj> (283) 5
    BOOL <nd_obj> (284) 6
    NUMBER <nd_obj> (285) 44 65 69
    FLOAT_NUM <nd_obj> (286) 66
    ID <nd_obj> (287) 2 21 37 39 41 67 69
    STR <nd_obj> (288) 21 23
    CHARACTER <nd_obj> (289) 71


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program <nd_obj> (46)
        on left: 1
        on right: 0
    entry <nd_obj> (47)
        on left: 2
        on right: 1
    datatype <nd_obj> (48)
        on left: 3 4 5 6
        on right: 2 37
    body <nd_obj> (49)
        on left: 7 8
        on right: 1 7 11 15 25
    block <nd_obj> (50)
        on left: 11 15 16 18 21
        on right: 7
    $@1 (51)
        on left: 9
        on right: 11
    $@2 (52)
        on left: 10
        on right: 11
    $@3 (53)
        on left: 12
        on right: 15
    $@4 (54)
        on left: 13
        on right: 15
    $@5 (55)
        on left: 14
        on right: 15
    $@6 (56)
        on left: 17
        on right: 18
    $@7 (57)
        on left: 19
        on right: 21
    $@8 (58)
        on left: 20
        on right: 21
    printparam <nd_obj> (59)
        on left: 22 23
        on right: 18
    else <nd_obj> (60)
        on left: 25 26
        on right: 15
    $@9 (61)
        on left: 24
        on right: 25
    M <nd_obj4> (62)
        on left: 27
        on right: 28 29
    condition <nd_obj3> (63)
        on left: 28 29 30 31 33 35
        on right: 11 15 28 29 31
    $@10 (64)
        on left: 32
        on right: 33
    $@11 (65)
        on left: 34
        on right: 35
    statement <nd_obj> (66)
        on left: 37 39 41
        on right: 16
    $@12 (67)
        on left: 36
        on right: 37
    $@13 (68)
        on left: 38
        on right: 39
    $@14 (69)
        on left: 40
        on right: 41
    init <nd_obj2> (70)
        on left: 42 43 44
        on right: 37
    expression <nd_obj2> (71)
        on left: 45 46
        on right: 39 41 43 45 53
    term <nd_obj2> (72)
        on left: 47 48
        on right: 45 46 47
    factor <nd_obj2> (73)
        on left: 49 50 51
        on right: 47 48
    base <nd_obj2> (74)
        on left: 52 53
        on right: 49 51
    exponent <nd_obj> (75)
        on left: 54
        on right: 49
    mulops <nd_obj> (76)
        on left: 55 56
        on right: 47
    addops <nd_obj> (77)
        on left: 57 58
        on right: 45
    relop <nd_obj> (78)
        on left: 59 60 61 62 63 64
        on right: 30 41
    value <nd_obj2> (79)
        on left: 65 66 67 68
        on right: 50 52 72
    array <nd_obj2> (80)
        on left: 69
        on right: 68
    charbool <nd_obj2> (81)
        on left: 70 71
        on right: 42 73
    valcharbool <nd_obj2> (82)
        on left: 72 73
        on right: 22 30 77
    bools <nd_obj2> (83)
        on left: 74 75
        on right: 70
    return <nd_obj> (84)
        on left: 77 78
        on right: 1
    $@15 (85)
        on left: 76
        on right: 77


State 0

    0 $accept: • program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    program   go to state 5
    entry     go to state 6
    datatype  go to state 7


State 1

    3 datatype: INT •

    $default  reduce using rule 3 (datatype)


State 2

    4 datatype: FLOAT •

    $default  reduce using rule 4 (datatype)


State 3

    5 datatype: CHAR •

    $default  reduce using rule 5 (datatype)


State 4

    6 datatype: BOOL •

    $default  reduce using rule 6 (datatype)


State 5

    0 $accept: program • $end

    $end  shift, and go to state 8


State 6

    1 program: entry • '(' ')' '{' body return '}'

    '('  shift, and go to state 9


State 7

    2 entry: datatype • ID

    ID  shift, and go to state 10


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: entry '(' • ')' '{' body return '}'

    ')'  shift, and go to state 11


State 10

    2 entry: datatype ID •

    $default  reduce using rule 2 (entry)


State 11

    1 program: entry '(' ')' • '{' body return '}'

    '{'  shift, and go to state 12


State 12

    1 program: entry '(' ')' '{' • body return '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 19
    block      go to state 20
    statement  go to state 21


State 13

   18 block: PRINTFF • $@6 '(' printparam ')' ';'

    $default  reduce using rule 17 ($@6)

    $@6  go to state 22


State 14

   21 block: SCANFF • $@7 '(' STR ',' '&' ID $@8 ')' ';'

    $default  reduce using rule 19 ($@7)

    $@7  go to state 23


State 15

   15 block: IF • $@3 '(' condition ')' $@4 '{' body '}' $@5 else

    $default  reduce using rule 12 ($@3)

    $@3  go to state 24


State 16

   11 block: WHILE • $@1 '(' condition ')' $@2 '{' body '}'

    $default  reduce using rule 9 ($@1)

    $@1  go to state 25


State 17

   37 statement: DECLARE • datatype ID $@12 init

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    datatype  go to state 26


State 18

   39 statement: ID • $@13 '=' expression
   41          | ID • $@14 relop expression

    '='       reduce using rule 38 ($@13)
    $default  reduce using rule 40 ($@14)

    $@13  go to state 27
    $@14  go to state 28


State 19

    1 program: entry '(' ')' '{' body • return '}'

    RETURN  shift, and go to state 29

    $default  reduce using rule 78 (return)

    return  go to state 30


State 20

    7 body: block • body

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 31
    block      go to state 20
    statement  go to state 21


State 21

   16 block: statement • ';'

    ';'  shift, and go to state 32


State 22

   18 block: PRINTFF $@6 • '(' printparam ')' ';'

    '('  shift, and go to state 33


State 23

   21 block: SCANFF $@7 • '(' STR ',' '&' ID $@8 ')' ';'

    '('  shift, and go to state 34


State 24

   15 block: IF $@3 • '(' condition ')' $@4 '{' body '}' $@5 else

    '('  shift, and go to state 35


State 25

   11 block: WHILE $@1 • '(' condition ')' $@2 '{' body '}'

    '('  shift, and go to state 36


State 26

   37 statement: DECLARE datatype • ID $@12 init

    ID  shift, and go to state 37


State 27

   39 statement: ID $@13 • '=' expression

    '='  shift, and go to state 38


State 28

   41 statement: ID $@14 • relop expression

    GTE  shift, and go to state 39
    LTE  shift, and go to state 40
    GT   shift, and go to state 41
    LT   shift, and go to state 42
    EQ   shift, and go to state 43
    NE   shift, and go to state 44

    relop  go to state 45


State 29

   77 return: RETURN • $@15 valcharbool ';'

    $default  reduce using rule 76 ($@15)

    $@15  go to state 46


State 30

    1 program: entry '(' ')' '{' body return • '}'

    '}'  shift, and go to state 47


State 31

    7 body: block body •

    $default  reduce using rule 7 (body)


State 32

   16 block: statement ';' •

    $default  reduce using rule 16 (block)


State 33

   18 block: PRINTFF $@6 '(' • printparam ')' ';'

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    STR        shift, and go to state 53
    CHARACTER  shift, and go to state 54

    printparam   go to state 55
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 59
    bools        go to state 60


State 34

   21 block: SCANFF $@7 '(' • STR ',' '&' ID $@8 ')' ';'

    STR  shift, and go to state 61


State 35

   15 block: IF $@3 '(' • condition ')' $@4 '{' body '}' $@5 else

    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 64

    condition    go to state 65
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 66
    bools        go to state 60


State 36

   11 block: WHILE $@1 '(' • condition ')' $@2 '{' body '}'

    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 64

    condition    go to state 67
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 66
    bools        go to state 60


State 37

   37 statement: DECLARE datatype ID • $@12 init

    $default  reduce using rule 36 ($@12)

    $@12  go to state 68


State 38

   39 statement: ID $@13 '=' • expression

    LOG        shift, and go to state 69
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    expression  go to state 71
    term        go to state 72
    factor      go to state 73
    base        go to state 74
    value       go to state 75
    array       go to state 57


State 39

   62 relop: GTE •

    $default  reduce using rule 62 (relop)


State 40

   61 relop: LTE •

    $default  reduce using rule 61 (relop)


State 41

   60 relop: GT •

    $default  reduce using rule 60 (relop)


State 42

   59 relop: LT •

    $default  reduce using rule 59 (relop)


State 43

   63 relop: EQ •

    $default  reduce using rule 63 (relop)


State 44

   64 relop: NE •

    $default  reduce using rule 64 (relop)


State 45

   41 statement: ID $@14 relop • expression

    LOG        shift, and go to state 69
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    expression  go to state 76
    term        go to state 72
    factor      go to state 73
    base        go to state 74
    value       go to state 75
    array       go to state 57


State 46

   77 return: RETURN $@15 • valcharbool ';'

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 77
    bools        go to state 60


State 47

    1 program: entry '(' ')' '{' body return '}' •

    $default  reduce using rule 1 (program)


State 48

   74 bools: TRUE •

    $default  reduce using rule 74 (bools)


State 49

   75 bools: FALSE •

    $default  reduce using rule 75 (bools)


State 50

   65 value: NUMBER •

    $default  reduce using rule 65 (value)


State 51

   66 value: FLOAT_NUM •

    $default  reduce using rule 66 (value)


State 52

   67 value: ID •
   69 array: ID • '[' NUMBER ']'

    '['  shift, and go to state 78

    $default  reduce using rule 67 (value)


State 53

   23 printparam: STR •

    $default  reduce using rule 23 (printparam)


State 54

   71 charbool: CHARACTER •

    $default  reduce using rule 71 (charbool)


State 55

   18 block: PRINTFF $@6 '(' printparam • ')' ';'

    ')'  shift, and go to state 79


State 56

   72 valcharbool: value •

    $default  reduce using rule 72 (valcharbool)


State 57

   68 value: array •

    $default  reduce using rule 68 (value)


State 58

   73 valcharbool: charbool •

    $default  reduce using rule 73 (valcharbool)


State 59

   22 printparam: valcharbool •

    $default  reduce using rule 22 (printparam)


State 60

   70 charbool: bools •

    $default  reduce using rule 70 (charbool)


State 61

   21 block: SCANFF $@7 '(' STR • ',' '&' ID $@8 ')' ';'

    ','  shift, and go to state 80


State 62

   33 condition: TRUE • $@10
   74 bools: TRUE •

    AND       reduce using rule 32 ($@10)
    OR        reduce using rule 32 ($@10)
    ')'       reduce using rule 32 ($@10)
    $default  reduce using rule 74 (bools)

    $@10  go to state 81


State 63

   35 condition: FALSE • $@11
   75 bools: FALSE •

    AND       reduce using rule 34 ($@11)
    OR        reduce using rule 34 ($@11)
    ')'       reduce using rule 34 ($@11)
    $default  reduce using rule 75 (bools)

    $@11  go to state 82


State 64

   31 condition: '(' • condition ')'

    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 64

    condition    go to state 83
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 66
    bools        go to state 60


State 65

   15 block: IF $@3 '(' condition • ')' $@4 '{' body '}' $@5 else
   28 condition: condition • AND M condition
   29          | condition • OR M condition

    AND  shift, and go to state 84
    OR   shift, and go to state 85
    ')'  shift, and go to state 86


State 66

   30 condition: valcharbool • relop valcharbool

    GTE  shift, and go to state 39
    LTE  shift, and go to state 40
    GT   shift, and go to state 41
    LT   shift, and go to state 42
    EQ   shift, and go to state 43
    NE   shift, and go to state 44

    relop  go to state 87


State 67

   11 block: WHILE $@1 '(' condition • ')' $@2 '{' body '}'
   28 condition: condition • AND M condition
   29          | condition • OR M condition

    AND  shift, and go to state 84
    OR   shift, and go to state 85
    ')'  shift, and go to state 88


State 68

   37 statement: DECLARE datatype ID $@12 • init

    '='  shift, and go to state 89
    '['  shift, and go to state 90

    init  go to state 91


State 69

   50 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 92


State 70

   53 base: '(' • expression ')'

    LOG        shift, and go to state 69
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    expression  go to state 93
    term        go to state 72
    factor      go to state 73
    base        go to state 74
    value       go to state 75
    array       go to state 57


State 71

   39 statement: ID $@13 '=' expression •
   45 expression: expression • addops term

    ADD       shift, and go to state 94
    SUBTRACT  shift, and go to state 95

    $default  reduce using rule 39 (statement)

    addops  go to state 96


State 72

   46 expression: term •
   47 term: term • mulops factor

    MULTIPLY  shift, and go to state 97
    DIVIDE    shift, and go to state 98

    $default  reduce using rule 46 (expression)

    mulops  go to state 99


State 73

   48 term: factor •

    $default  reduce using rule 48 (term)


State 74

   49 factor: base • exponent base
   51       | base •

    POW  shift, and go to state 100

    $default  reduce using rule 51 (factor)

    exponent  go to state 101


State 75

   52 base: value •

    $default  reduce using rule 52 (base)


State 76

   41 statement: ID $@14 relop expression •
   45 expression: expression • addops term

    ADD       shift, and go to state 94
    SUBTRACT  shift, and go to state 95

    $default  reduce using rule 41 (statement)

    addops  go to state 96


State 77

   77 return: RETURN $@15 valcharbool • ';'

    ';'  shift, and go to state 102


State 78

   69 array: ID '[' • NUMBER ']'

    NUMBER  shift, and go to state 103


State 79

   18 block: PRINTFF $@6 '(' printparam ')' • ';'

    ';'  shift, and go to state 104


State 80

   21 block: SCANFF $@7 '(' STR ',' • '&' ID $@8 ')' ';'

    '&'  shift, and go to state 105


State 81

   33 condition: TRUE $@10 •

    $default  reduce using rule 33 (condition)


State 82

   35 condition: FALSE $@11 •

    $default  reduce using rule 35 (condition)


State 83

   28 condition: condition • AND M condition
   29          | condition • OR M condition
   31          | '(' condition • ')'

    AND  shift, and go to state 84
    OR   shift, and go to state 85
    ')'  shift, and go to state 106


State 84

   28 condition: condition AND • M condition

    $default  reduce using rule 27 (M)

    M  go to state 107


State 85

   29 condition: condition OR • M condition

    $default  reduce using rule 27 (M)

    M  go to state 108


State 86

   15 block: IF $@3 '(' condition ')' • $@4 '{' body '}' $@5 else

    $default  reduce using rule 13 ($@4)

    $@4  go to state 109


State 87

   30 condition: valcharbool relop • valcharbool

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 110
    bools        go to state 60


State 88

   11 block: WHILE $@1 '(' condition ')' • $@2 '{' body '}'

    $default  reduce using rule 10 ($@2)

    $@2  go to state 111


State 89

   42 init: '=' • charbool
   43     | '=' • expression

    LOG        shift, and go to state 69
    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 70

    expression  go to state 112
    term        go to state 72
    factor      go to state 73
    base        go to state 74
    value       go to state 75
    array       go to state 57
    charbool    go to state 113
    bools       go to state 60


State 90

   44 init: '[' • NUMBER ']'

    NUMBER  shift, and go to state 114


State 91

   37 statement: DECLARE datatype ID $@12 init •

    $default  reduce using rule 37 (statement)


State 92

   50 factor: LOG '(' • value ',' value ')'

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52

    value  go to state 115
    array  go to state 57


State 93

   45 expression: expression • addops term
   53 base: '(' expression • ')'

    ADD       shift, and go to state 94
    SUBTRACT  shift, and go to state 95
    ')'       shift, and go to state 116

    addops  go to state 96


State 94

   57 addops: ADD •

    $default  reduce using rule 57 (addops)


State 95

   58 addops: SUBTRACT •

    $default  reduce using rule 58 (addops)


State 96

   45 expression: expression addops • term

    LOG        shift, and go to state 69
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    term    go to state 117
    factor  go to state 73
    base    go to state 74
    value   go to state 75
    array   go to state 57


State 97

   55 mulops: MULTIPLY •

    $default  reduce using rule 55 (mulops)


State 98

   56 mulops: DIVIDE •

    $default  reduce using rule 56 (mulops)


State 99

   47 term: term mulops • factor

    LOG        shift, and go to state 69
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    factor  go to state 118
    base    go to state 74
    value   go to state 75
    array   go to state 57


State 100

   54 exponent: POW •

    $default  reduce using rule 54 (exponent)


State 101

   49 factor: base exponent • base

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 70

    base   go to state 119
    value  go to state 75
    array  go to state 57


State 102

   77 return: RETURN $@15 valcharbool ';' •

    $default  reduce using rule 77 (return)


State 103

   69 array: ID '[' NUMBER • ']'

    ']'  shift, and go to state 120


State 104

   18 block: PRINTFF $@6 '(' printparam ')' ';' •

    $default  reduce using rule 18 (block)


State 105

   21 block: SCANFF $@7 '(' STR ',' '&' • ID $@8 ')' ';'

    ID  shift, and go to state 121


State 106

   31 condition: '(' condition ')' •

    $default  reduce using rule 31 (condition)


State 107

   28 condition: condition AND M • condition

    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 64

    condition    go to state 122
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 66
    bools        go to state 60


State 108

   29 condition: condition OR M • condition

    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 64

    condition    go to state 123
    value        go to state 56
    array        go to state 57
    charbool     go to state 58
    valcharbool  go to state 66
    bools        go to state 60


State 109

   15 block: IF $@3 '(' condition ')' $@4 • '{' body '}' $@5 else

    '{'  shift, and go to state 124


State 110

   30 condition: valcharbool relop valcharbool •

    $default  reduce using rule 30 (condition)


State 111

   11 block: WHILE $@1 '(' condition ')' $@2 • '{' body '}'

    '{'  shift, and go to state 125


State 112

   43 init: '=' expression •
   45 expression: expression • addops term

    ADD       shift, and go to state 94
    SUBTRACT  shift, and go to state 95

    $default  reduce using rule 43 (init)

    addops  go to state 96


State 113

   42 init: '=' charbool •

    $default  reduce using rule 42 (init)


State 114

   44 init: '[' NUMBER • ']'

    ']'  shift, and go to state 126


State 115

   50 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 127


State 116

   53 base: '(' expression ')' •

    $default  reduce using rule 53 (base)


State 117

   45 expression: expression addops term •
   47 term: term • mulops factor

    MULTIPLY  shift, and go to state 97
    DIVIDE    shift, and go to state 98

    $default  reduce using rule 45 (expression)

    mulops  go to state 99


State 118

   47 term: term mulops factor •

    $default  reduce using rule 47 (term)


State 119

   49 factor: base exponent base •

    $default  reduce using rule 49 (factor)


State 120

   69 array: ID '[' NUMBER ']' •

    $default  reduce using rule 69 (array)


State 121

   21 block: SCANFF $@7 '(' STR ',' '&' ID • $@8 ')' ';'

    $default  reduce using rule 20 ($@8)

    $@8  go to state 128


State 122

   28 condition: condition • AND M condition
   28          | condition AND M condition •
   29          | condition • OR M condition

    AND  shift, and go to state 84
    OR   shift, and go to state 85

    AND       [reduce using rule 28 (condition)]
    OR        [reduce using rule 28 (condition)]
    $default  reduce using rule 28 (condition)


State 123

   28 condition: condition • AND M condition
   29          | condition • OR M condition
   29          | condition OR M condition •

    AND  shift, and go to state 84
    OR   shift, and go to state 85

    AND       [reduce using rule 29 (condition)]
    OR        [reduce using rule 29 (condition)]
    $default  reduce using rule 29 (condition)


State 124

   15 block: IF $@3 '(' condition ')' $@4 '{' • body '}' $@5 else

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 129
    block      go to state 20
    statement  go to state 21


State 125

   11 block: WHILE $@1 '(' condition ')' $@2 '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 130
    block      go to state 20
    statement  go to state 21


State 126

   44 init: '[' NUMBER ']' •

    $default  reduce using rule 44 (init)


State 127

   50 factor: LOG '(' value ',' • value ')'

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52

    value  go to state 131
    array  go to state 57


State 128

   21 block: SCANFF $@7 '(' STR ',' '&' ID $@8 • ')' ';'

    ')'  shift, and go to state 132


State 129

   15 block: IF $@3 '(' condition ')' $@4 '{' body • '}' $@5 else

    '}'  shift, and go to state 133


State 130

   11 block: WHILE $@1 '(' condition ')' $@2 '{' body • '}'

    '}'  shift, and go to state 134


State 131

   50 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 135


State 132

   21 block: SCANFF $@7 '(' STR ',' '&' ID $@8 ')' • ';'

    ';'  shift, and go to state 136


State 133

   15 block: IF $@3 '(' condition ')' $@4 '{' body '}' • $@5 else

    $default  reduce using rule 14 ($@5)

    $@5  go to state 137


State 134

   11 block: WHILE $@1 '(' condition ')' $@2 '{' body '}' •

    $default  reduce using rule 11 (block)


State 135

   50 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 50 (factor)


State 136

   21 block: SCANFF $@7 '(' STR ',' '&' ID $@8 ')' ';' •

    $default  reduce using rule 21 (block)


State 137

   15 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 • else

    ELSE  shift, and go to state 138

    $default  reduce using rule 26 (else)

    else  go to state 139


State 138

   25 else: ELSE • $@9 '{' body '}'

    $default  reduce using rule 24 ($@9)

    $@9  go to state 140


State 139

   15 block: IF $@3 '(' condition ')' $@4 '{' body '}' $@5 else •

    $default  reduce using rule 15 (block)


State 140

   25 else: ELSE $@9 • '{' body '}'

    '{'  shift, and go to state 141


State 141

   25 else: ELSE $@9 '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 142
    block      go to state 20
    statement  go to state 21


State 142

   25 else: ELSE $@9 '{' body • '}'

    '}'  shift, and go to state 143


State 143

   25 else: ELSE $@9 '{' body '}' •

    $default  reduce using rule 25 (else)
