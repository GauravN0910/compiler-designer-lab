Terminals unused in grammar

    AND
    OR


Grammar

    0 $accept: program $end

    1 program: entry '(' ')' '{' body return '}'

    2 entry: datatype ID

    3 datatype: INT
    4         | FLOAT
    5         | CHAR
    6         | BOOL

    7 body: block body
    8     | ε

    9 $@1: ε

   10 block: WHILE $@1 '(' condition ')' '{' body '}'

   11 $@2: ε

   12 $@3: ε

   13 $@4: ε

   14 block: IF $@2 '(' condition ')' $@3 '{' body '}' $@4 else
   15      | statement ';'

   16 $@5: ε

   17 block: PRINTFF $@5 '(' printparam ')' ';'

   18 $@6: ε

   19 $@7: ε

   20 block: SCANFF $@6 '(' STR ',' '&' ID $@7 ')' ';'

   21 printparam: valcharbool
   22           | STR

   23 $@8: ε

   24 else: ELSE $@8 '{' body '}'
   25     | ε

   26 condition: valcharbool relop valcharbool

   27 $@9: ε

   28 condition: TRUE $@9

   29 $@10: ε

   30 condition: FALSE $@10

   31 $@11: ε

   32 statement: DECLARE datatype ID $@11 init

   33 $@12: ε

   34 statement: ID $@12 '=' expression

   35 $@13: ε

   36 statement: ID $@13 relop expression

   37 init: '=' charbool
   38     | '=' expression

   39 expression: expression addops term
   40           | term

   41 term: term mulops factor
   42     | factor

   43 factor: base exponent base
   44       | LOG '(' value ',' value ')'
   45       | base

   46 base: value
   47     | '(' expression ')'

   48 exponent: POW

   49 mulops: MULTIPLY
   50       | DIVIDE

   51 addops: ADD
   52       | SUBTRACT

   53 relop: LT
   54      | GT
   55      | LTE
   56      | GTE
   57      | EQ
   58      | NE

   59 value: NUMBER
   60      | FLOAT_NUM
   61      | ID

   62 charbool: bools
   63         | CHARACTER

   64 valcharbool: value
   65            | charbool

   66 bools: TRUE
   67      | FALSE

   68 $@14: ε

   69 return: RETURN $@14 valcharbool ';'
   70       | ε


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 20
    '(' (40) 1 10 14 17 20 44 47
    ')' (41) 1 10 14 17 20 44 47
    ',' (44) 20 44
    ';' (59) 15 17 20 69
    '=' (61) 34 37 38
    '{' (123) 1 10 14 24
    '}' (125) 1 10 14 24
    error (256)
    PRINTFF <nd_obj> (258) 17
    SCANFF <nd_obj> (259) 20
    IF <nd_obj> (260) 14
    ELSE <nd_obj> (261) 24
    WHILE <nd_obj> (262) 10
    RETURN <nd_obj> (263) 69
    DECLARE <nd_obj> (264) 32
    ADD <nd_obj> (265) 51
    SUBTRACT <nd_obj> (266) 52
    MULTIPLY <nd_obj> (267) 49
    DIVIDE <nd_obj> (268) 50
    LOG <nd_obj> (269) 44
    POW <nd_obj> (270) 48
    GTE <nd_obj> (271) 56
    LTE <nd_obj> (272) 55
    GT <nd_obj> (273) 54
    LT <nd_obj> (274) 53
    EQ <nd_obj> (275) 57
    NE <nd_obj> (276) 58
    TRUE <nd_obj> (277) 28 66
    FALSE <nd_obj> (278) 30 67
    AND <nd_obj> (279)
    OR <nd_obj> (280)
    INT <nd_obj> (281) 3
    FLOAT <nd_obj> (282) 4
    CHAR <nd_obj> (283) 5
    BOOL <nd_obj> (284) 6
    NUMBER <nd_obj> (285) 59
    FLOAT_NUM <nd_obj> (286) 60
    ID <nd_obj> (287) 2 20 32 34 36 61
    STR <nd_obj> (288) 20 22
    CHARACTER <nd_obj> (289) 63


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <nd_obj> (44)
        on left: 1
        on right: 0
    entry <nd_obj> (45)
        on left: 2
        on right: 1
    datatype <nd_obj> (46)
        on left: 3 4 5 6
        on right: 2 32
    body <nd_obj> (47)
        on left: 7 8
        on right: 1 7 10 14 24
    block <nd_obj> (48)
        on left: 10 14 15 17 20
        on right: 7
    $@1 (49)
        on left: 9
        on right: 10
    $@2 (50)
        on left: 11
        on right: 14
    $@3 (51)
        on left: 12
        on right: 14
    $@4 (52)
        on left: 13
        on right: 14
    $@5 (53)
        on left: 16
        on right: 17
    $@6 (54)
        on left: 18
        on right: 20
    $@7 (55)
        on left: 19
        on right: 20
    printparam <nd_obj> (56)
        on left: 21 22
        on right: 17
    else <nd_obj> (57)
        on left: 24 25
        on right: 14
    $@8 (58)
        on left: 23
        on right: 24
    condition <nd_obj3> (59)
        on left: 26 28 30
        on right: 10 14
    $@9 (60)
        on left: 27
        on right: 28
    $@10 (61)
        on left: 29
        on right: 30
    statement <nd_obj> (62)
        on left: 32 34 36
        on right: 15
    $@11 (63)
        on left: 31
        on right: 32
    $@12 (64)
        on left: 33
        on right: 34
    $@13 (65)
        on left: 35
        on right: 36
    init <nd_obj2> (66)
        on left: 37 38
        on right: 32
    expression <nd_obj2> (67)
        on left: 39 40
        on right: 34 36 38 39 47
    term <nd_obj2> (68)
        on left: 41 42
        on right: 39 40 41
    factor <nd_obj2> (69)
        on left: 43 44 45
        on right: 41 42
    base <nd_obj2> (70)
        on left: 46 47
        on right: 43 45
    exponent <nd_obj> (71)
        on left: 48
        on right: 43
    mulops <nd_obj> (72)
        on left: 49 50
        on right: 41
    addops <nd_obj> (73)
        on left: 51 52
        on right: 39
    relop <nd_obj> (74)
        on left: 53 54 55 56 57 58
        on right: 26 36
    value <nd_obj2> (75)
        on left: 59 60 61
        on right: 44 46 64
    charbool <nd_obj2> (76)
        on left: 62 63
        on right: 37 65
    valcharbool <nd_obj2> (77)
        on left: 64 65
        on right: 21 26 69
    bools <nd_obj2> (78)
        on left: 66 67
        on right: 62
    return <nd_obj> (79)
        on left: 69 70
        on right: 1
    $@14 (80)
        on left: 68
        on right: 69


State 0

    0 $accept: • program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    program   go to state 5
    entry     go to state 6
    datatype  go to state 7


State 1

    3 datatype: INT •

    $default  reduce using rule 3 (datatype)


State 2

    4 datatype: FLOAT •

    $default  reduce using rule 4 (datatype)


State 3

    5 datatype: CHAR •

    $default  reduce using rule 5 (datatype)


State 4

    6 datatype: BOOL •

    $default  reduce using rule 6 (datatype)


State 5

    0 $accept: program • $end

    $end  shift, and go to state 8


State 6

    1 program: entry • '(' ')' '{' body return '}'

    '('  shift, and go to state 9


State 7

    2 entry: datatype • ID

    ID  shift, and go to state 10


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: entry '(' • ')' '{' body return '}'

    ')'  shift, and go to state 11


State 10

    2 entry: datatype ID •

    $default  reduce using rule 2 (entry)


State 11

    1 program: entry '(' ')' • '{' body return '}'

    '{'  shift, and go to state 12


State 12

    1 program: entry '(' ')' '{' • body return '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 19
    block      go to state 20
    statement  go to state 21


State 13

   17 block: PRINTFF • $@5 '(' printparam ')' ';'

    $default  reduce using rule 16 ($@5)

    $@5  go to state 22


State 14

   20 block: SCANFF • $@6 '(' STR ',' '&' ID $@7 ')' ';'

    $default  reduce using rule 18 ($@6)

    $@6  go to state 23


State 15

   14 block: IF • $@2 '(' condition ')' $@3 '{' body '}' $@4 else

    $default  reduce using rule 11 ($@2)

    $@2  go to state 24


State 16

   10 block: WHILE • $@1 '(' condition ')' '{' body '}'

    $default  reduce using rule 9 ($@1)

    $@1  go to state 25


State 17

   32 statement: DECLARE • datatype ID $@11 init

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    BOOL   shift, and go to state 4

    datatype  go to state 26


State 18

   34 statement: ID • $@12 '=' expression
   36          | ID • $@13 relop expression

    '='       reduce using rule 33 ($@12)
    $default  reduce using rule 35 ($@13)

    $@12  go to state 27
    $@13  go to state 28


State 19

    1 program: entry '(' ')' '{' body • return '}'

    RETURN  shift, and go to state 29

    $default  reduce using rule 70 (return)

    return  go to state 30


State 20

    7 body: block • body

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 31
    block      go to state 20
    statement  go to state 21


State 21

   15 block: statement • ';'

    ';'  shift, and go to state 32


State 22

   17 block: PRINTFF $@5 • '(' printparam ')' ';'

    '('  shift, and go to state 33


State 23

   20 block: SCANFF $@6 • '(' STR ',' '&' ID $@7 ')' ';'

    '('  shift, and go to state 34


State 24

   14 block: IF $@2 • '(' condition ')' $@3 '{' body '}' $@4 else

    '('  shift, and go to state 35


State 25

   10 block: WHILE $@1 • '(' condition ')' '{' body '}'

    '('  shift, and go to state 36


State 26

   32 statement: DECLARE datatype • ID $@11 init

    ID  shift, and go to state 37


State 27

   34 statement: ID $@12 • '=' expression

    '='  shift, and go to state 38


State 28

   36 statement: ID $@13 • relop expression

    GTE  shift, and go to state 39
    LTE  shift, and go to state 40
    GT   shift, and go to state 41
    LT   shift, and go to state 42
    EQ   shift, and go to state 43
    NE   shift, and go to state 44

    relop  go to state 45


State 29

   69 return: RETURN • $@14 valcharbool ';'

    $default  reduce using rule 68 ($@14)

    $@14  go to state 46


State 30

    1 program: entry '(' ')' '{' body return • '}'

    '}'  shift, and go to state 47


State 31

    7 body: block body •

    $default  reduce using rule 7 (body)


State 32

   15 block: statement ';' •

    $default  reduce using rule 15 (block)


State 33

   17 block: PRINTFF $@5 '(' • printparam ')' ';'

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    STR        shift, and go to state 53
    CHARACTER  shift, and go to state 54

    printparam   go to state 55
    value        go to state 56
    charbool     go to state 57
    valcharbool  go to state 58
    bools        go to state 59


State 34

   20 block: SCANFF $@6 '(' • STR ',' '&' ID $@7 ')' ';'

    STR  shift, and go to state 60


State 35

   14 block: IF $@2 '(' • condition ')' $@3 '{' body '}' $@4 else

    TRUE       shift, and go to state 61
    FALSE      shift, and go to state 62
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    condition    go to state 63
    value        go to state 56
    charbool     go to state 57
    valcharbool  go to state 64
    bools        go to state 59


State 36

   10 block: WHILE $@1 '(' • condition ')' '{' body '}'

    TRUE       shift, and go to state 61
    FALSE      shift, and go to state 62
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    condition    go to state 65
    value        go to state 56
    charbool     go to state 57
    valcharbool  go to state 64
    bools        go to state 59


State 37

   32 statement: DECLARE datatype ID • $@11 init

    $default  reduce using rule 31 ($@11)

    $@11  go to state 66


State 38

   34 statement: ID $@12 '=' • expression

    LOG        shift, and go to state 67
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    expression  go to state 69
    term        go to state 70
    factor      go to state 71
    base        go to state 72
    value       go to state 73


State 39

   56 relop: GTE •

    $default  reduce using rule 56 (relop)


State 40

   55 relop: LTE •

    $default  reduce using rule 55 (relop)


State 41

   54 relop: GT •

    $default  reduce using rule 54 (relop)


State 42

   53 relop: LT •

    $default  reduce using rule 53 (relop)


State 43

   57 relop: EQ •

    $default  reduce using rule 57 (relop)


State 44

   58 relop: NE •

    $default  reduce using rule 58 (relop)


State 45

   36 statement: ID $@13 relop • expression

    LOG        shift, and go to state 67
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    expression  go to state 74
    term        go to state 70
    factor      go to state 71
    base        go to state 72
    value       go to state 73


State 46

   69 return: RETURN $@14 • valcharbool ';'

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    value        go to state 56
    charbool     go to state 57
    valcharbool  go to state 75
    bools        go to state 59


State 47

    1 program: entry '(' ')' '{' body return '}' •

    $default  reduce using rule 1 (program)


State 48

   66 bools: TRUE •

    $default  reduce using rule 66 (bools)


State 49

   67 bools: FALSE •

    $default  reduce using rule 67 (bools)


State 50

   59 value: NUMBER •

    $default  reduce using rule 59 (value)


State 51

   60 value: FLOAT_NUM •

    $default  reduce using rule 60 (value)


State 52

   61 value: ID •

    $default  reduce using rule 61 (value)


State 53

   22 printparam: STR •

    $default  reduce using rule 22 (printparam)


State 54

   63 charbool: CHARACTER •

    $default  reduce using rule 63 (charbool)


State 55

   17 block: PRINTFF $@5 '(' printparam • ')' ';'

    ')'  shift, and go to state 76


State 56

   64 valcharbool: value •

    $default  reduce using rule 64 (valcharbool)


State 57

   65 valcharbool: charbool •

    $default  reduce using rule 65 (valcharbool)


State 58

   21 printparam: valcharbool •

    $default  reduce using rule 21 (printparam)


State 59

   62 charbool: bools •

    $default  reduce using rule 62 (charbool)


State 60

   20 block: SCANFF $@6 '(' STR • ',' '&' ID $@7 ')' ';'

    ','  shift, and go to state 77


State 61

   28 condition: TRUE • $@9
   66 bools: TRUE •

    ')'       reduce using rule 27 ($@9)
    $default  reduce using rule 66 (bools)

    $@9  go to state 78


State 62

   30 condition: FALSE • $@10
   67 bools: FALSE •

    ')'       reduce using rule 29 ($@10)
    $default  reduce using rule 67 (bools)

    $@10  go to state 79


State 63

   14 block: IF $@2 '(' condition • ')' $@3 '{' body '}' $@4 else

    ')'  shift, and go to state 80


State 64

   26 condition: valcharbool • relop valcharbool

    GTE  shift, and go to state 39
    LTE  shift, and go to state 40
    GT   shift, and go to state 41
    LT   shift, and go to state 42
    EQ   shift, and go to state 43
    NE   shift, and go to state 44

    relop  go to state 81


State 65

   10 block: WHILE $@1 '(' condition • ')' '{' body '}'

    ')'  shift, and go to state 82


State 66

   32 statement: DECLARE datatype ID $@11 • init

    '='  shift, and go to state 83

    init  go to state 84


State 67

   44 factor: LOG • '(' value ',' value ')'

    '('  shift, and go to state 85


State 68

   47 base: '(' • expression ')'

    LOG        shift, and go to state 67
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    expression  go to state 86
    term        go to state 70
    factor      go to state 71
    base        go to state 72
    value       go to state 73


State 69

   34 statement: ID $@12 '=' expression •
   39 expression: expression • addops term

    ADD       shift, and go to state 87
    SUBTRACT  shift, and go to state 88

    $default  reduce using rule 34 (statement)

    addops  go to state 89


State 70

   40 expression: term •
   41 term: term • mulops factor

    MULTIPLY  shift, and go to state 90
    DIVIDE    shift, and go to state 91

    $default  reduce using rule 40 (expression)

    mulops  go to state 92


State 71

   42 term: factor •

    $default  reduce using rule 42 (term)


State 72

   43 factor: base • exponent base
   45       | base •

    POW  shift, and go to state 93

    $default  reduce using rule 45 (factor)

    exponent  go to state 94


State 73

   46 base: value •

    $default  reduce using rule 46 (base)


State 74

   36 statement: ID $@13 relop expression •
   39 expression: expression • addops term

    ADD       shift, and go to state 87
    SUBTRACT  shift, and go to state 88

    $default  reduce using rule 36 (statement)

    addops  go to state 89


State 75

   69 return: RETURN $@14 valcharbool • ';'

    ';'  shift, and go to state 95


State 76

   17 block: PRINTFF $@5 '(' printparam ')' • ';'

    ';'  shift, and go to state 96


State 77

   20 block: SCANFF $@6 '(' STR ',' • '&' ID $@7 ')' ';'

    '&'  shift, and go to state 97


State 78

   28 condition: TRUE $@9 •

    $default  reduce using rule 28 (condition)


State 79

   30 condition: FALSE $@10 •

    $default  reduce using rule 30 (condition)


State 80

   14 block: IF $@2 '(' condition ')' • $@3 '{' body '}' $@4 else

    $default  reduce using rule 12 ($@3)

    $@3  go to state 98


State 81

   26 condition: valcharbool relop • valcharbool

    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54

    value        go to state 56
    charbool     go to state 57
    valcharbool  go to state 99
    bools        go to state 59


State 82

   10 block: WHILE $@1 '(' condition ')' • '{' body '}'

    '{'  shift, and go to state 100


State 83

   37 init: '=' • charbool
   38     | '=' • expression

    LOG        shift, and go to state 67
    TRUE       shift, and go to state 48
    FALSE      shift, and go to state 49
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    CHARACTER  shift, and go to state 54
    '('        shift, and go to state 68

    expression  go to state 101
    term        go to state 70
    factor      go to state 71
    base        go to state 72
    value       go to state 73
    charbool    go to state 102
    bools       go to state 59


State 84

   32 statement: DECLARE datatype ID $@11 init •

    $default  reduce using rule 32 (statement)


State 85

   44 factor: LOG '(' • value ',' value ')'

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52

    value  go to state 103


State 86

   39 expression: expression • addops term
   47 base: '(' expression • ')'

    ADD       shift, and go to state 87
    SUBTRACT  shift, and go to state 88
    ')'       shift, and go to state 104

    addops  go to state 89


State 87

   51 addops: ADD •

    $default  reduce using rule 51 (addops)


State 88

   52 addops: SUBTRACT •

    $default  reduce using rule 52 (addops)


State 89

   39 expression: expression addops • term

    LOG        shift, and go to state 67
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    term    go to state 105
    factor  go to state 71
    base    go to state 72
    value   go to state 73


State 90

   49 mulops: MULTIPLY •

    $default  reduce using rule 49 (mulops)


State 91

   50 mulops: DIVIDE •

    $default  reduce using rule 50 (mulops)


State 92

   41 term: term mulops • factor

    LOG        shift, and go to state 67
    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    factor  go to state 106
    base    go to state 72
    value   go to state 73


State 93

   48 exponent: POW •

    $default  reduce using rule 48 (exponent)


State 94

   43 factor: base exponent • base

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52
    '('        shift, and go to state 68

    base   go to state 107
    value  go to state 73


State 95

   69 return: RETURN $@14 valcharbool ';' •

    $default  reduce using rule 69 (return)


State 96

   17 block: PRINTFF $@5 '(' printparam ')' ';' •

    $default  reduce using rule 17 (block)


State 97

   20 block: SCANFF $@6 '(' STR ',' '&' • ID $@7 ')' ';'

    ID  shift, and go to state 108


State 98

   14 block: IF $@2 '(' condition ')' $@3 • '{' body '}' $@4 else

    '{'  shift, and go to state 109


State 99

   26 condition: valcharbool relop valcharbool •

    $default  reduce using rule 26 (condition)


State 100

   10 block: WHILE $@1 '(' condition ')' '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 110
    block      go to state 20
    statement  go to state 21


State 101

   38 init: '=' expression •
   39 expression: expression • addops term

    ADD       shift, and go to state 87
    SUBTRACT  shift, and go to state 88

    $default  reduce using rule 38 (init)

    addops  go to state 89


State 102

   37 init: '=' charbool •

    $default  reduce using rule 37 (init)


State 103

   44 factor: LOG '(' value • ',' value ')'

    ','  shift, and go to state 111


State 104

   47 base: '(' expression ')' •

    $default  reduce using rule 47 (base)


State 105

   39 expression: expression addops term •
   41 term: term • mulops factor

    MULTIPLY  shift, and go to state 90
    DIVIDE    shift, and go to state 91

    $default  reduce using rule 39 (expression)

    mulops  go to state 92


State 106

   41 term: term mulops factor •

    $default  reduce using rule 41 (term)


State 107

   43 factor: base exponent base •

    $default  reduce using rule 43 (factor)


State 108

   20 block: SCANFF $@6 '(' STR ',' '&' ID • $@7 ')' ';'

    $default  reduce using rule 19 ($@7)

    $@7  go to state 112


State 109

   14 block: IF $@2 '(' condition ')' $@3 '{' • body '}' $@4 else

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 113
    block      go to state 20
    statement  go to state 21


State 110

   10 block: WHILE $@1 '(' condition ')' '{' body • '}'

    '}'  shift, and go to state 114


State 111

   44 factor: LOG '(' value ',' • value ')'

    NUMBER     shift, and go to state 50
    FLOAT_NUM  shift, and go to state 51
    ID         shift, and go to state 52

    value  go to state 115


State 112

   20 block: SCANFF $@6 '(' STR ',' '&' ID $@7 • ')' ';'

    ')'  shift, and go to state 116


State 113

   14 block: IF $@2 '(' condition ')' $@3 '{' body • '}' $@4 else

    '}'  shift, and go to state 117


State 114

   10 block: WHILE $@1 '(' condition ')' '{' body '}' •

    $default  reduce using rule 10 (block)


State 115

   44 factor: LOG '(' value ',' value • ')'

    ')'  shift, and go to state 118


State 116

   20 block: SCANFF $@6 '(' STR ',' '&' ID $@7 ')' • ';'

    ';'  shift, and go to state 119


State 117

   14 block: IF $@2 '(' condition ')' $@3 '{' body '}' • $@4 else

    $default  reduce using rule 13 ($@4)

    $@4  go to state 120


State 118

   44 factor: LOG '(' value ',' value ')' •

    $default  reduce using rule 44 (factor)


State 119

   20 block: SCANFF $@6 '(' STR ',' '&' ID $@7 ')' ';' •

    $default  reduce using rule 20 (block)


State 120

   14 block: IF $@2 '(' condition ')' $@3 '{' body '}' $@4 • else

    ELSE  shift, and go to state 121

    $default  reduce using rule 25 (else)

    else  go to state 122


State 121

   24 else: ELSE • $@8 '{' body '}'

    $default  reduce using rule 23 ($@8)

    $@8  go to state 123


State 122

   14 block: IF $@2 '(' condition ')' $@3 '{' body '}' $@4 else •

    $default  reduce using rule 14 (block)


State 123

   24 else: ELSE $@8 • '{' body '}'

    '{'  shift, and go to state 124


State 124

   24 else: ELSE $@8 '{' • body '}'

    PRINTFF  shift, and go to state 13
    SCANFF   shift, and go to state 14
    IF       shift, and go to state 15
    WHILE    shift, and go to state 16
    DECLARE  shift, and go to state 17
    ID       shift, and go to state 18

    $default  reduce using rule 8 (body)

    body       go to state 125
    block      go to state 20
    statement  go to state 21


State 125

   24 else: ELSE $@8 '{' body • '}'

    '}'  shift, and go to state 126


State 126

   24 else: ELSE $@8 '{' body '}' •

    $default  reduce using rule 24 (else)
