Arg: number:high


Arg: number:low


Arg: number:argarr


Function: partition

pivot = 0

t0 = 4 * low

u0 = argarr[t0]

pivot = u0

k = high

i = high

LABEL L0:

if i > low 
GOTO L1

GOTO L5

LABEL L1:

t1 = 4 * i

u1 = argarr[t1]

if u1 > u0
GOTO L2

GOTO L3

LABEL L2:

temp = 0

t2 = 4 * i

u2 = argarr[t2]

temp = u2

t3 = 4 * i

u3 = argarr[t3]

t4 = 4 * k

u4 = argarr[t4]

u3 = u4

t5 = 4 * k

u5 = argarr[t5]

u5 = temp

t6 = k - 1

k = t6

JUMP TO L4

LABEL L3:

LABEL L4:

t7 = i - 1

i = t7

JUMP TO L0

LABEL L5:

newtemp = 0

t8 = 4 * low

u6 = argarr[t8]

newtemp = u6

t9 = 4 * low

u7 = argarr[t9]

t10 = 4 * k

u8 = argarr[t10]

u7 = u8

t11 = 4 * k

u9 = argarr[t11]

u9 = newtemp

Arg: number:high


Arg: number:low


Arg: number:sortarr


Function: quickSort

if low < high 
GOTO L6

GOTO L7

LABEL L6:

idx = 0

PARAM: high

PARAM: low

PARAM: sortarr

idx = partition

t12 = idx - 1

PARAM: t12

PARAM: low

PARAM: sortarr

CALL: quickSort

t13 = idx + 1

PARAM: high

PARAM: t13

PARAM: sortarr

CALL: quickSort

JUMP TO L8

LABEL L7:

LABEL L8:


Function: main

arr = int [10]

n = 0

t14 = "Enter the number of elements"

PARAM t14

PARAM n

CALL scanf , 2

counter = 0

LABEL L9:

if counter < n 
GOTO L10

GOTO L11

LABEL L10:

t15 = 4 * counter

u10 = arr[t15]

t16 = "Enter value"

PARAM t16

PARAM u10

CALL scanf , 2

t17 = counter + 1

counter = t17

JUMP TO L9

LABEL L11:

t18 = n - 1

PARAM: t18

PARAM: 0

PARAM: arr

CALL: quickSort

